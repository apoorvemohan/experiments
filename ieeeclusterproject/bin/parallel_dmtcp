#!/usr/bin/env python

#total memory usage of all processes should be <= total memory of the system
#return list of processes to be exetuted next

import os
import sys
import time
import copy
import random
import signal
import subprocess as s
import multiprocessing as m
import xml.etree.ElementTree as ET

path = os.path.dirname(os.path.realpath(__file__))  + '/..'
sys.path.insert(0, path)

import common.imports.utils as u
import common.imports.constants as c
import common.imports.dmtcp_utils as du
import common.imports.rules as r

TIME = 60
MICRO_TIME = 10
timer = TIME
running_pid_port = []
app_stats_map = {}
stats_history_map = {}
total_passes = 0
running_history_map = {}

def setup_for_restart(chkptdir):
        fp = open(chkptdir + '/dmtcp_env.txt', 'w')
        fp.write('STATFILE=$STATFILE\n')
        fp.write('STATGEN=$STATGEN\n')
        fp.close()

def get_runnable_instance_map():
        runnablemap = {}
	u.listonlydir(c.PARALLEL_DMTCP_CHKPTS_DIR).sort()
        for chkpt in u.listonlydir(c.PARALLEL_DMTCP_CHKPTS_DIR):
                chkptlist = u.listonlydir(c.PARALLEL_DMTCP_CHKPTS_DIR + '/' + chkpt)
                if len(chkptlist) > 0:
                        runnablemap.update({chkpt: c.PARALLEL_DMTCP_CHKPTS_DIR + '/' + chkpt + '/' + max(chkptlist) + '/' + u.getchkptimg(c.PARALLEL_DMTCP_CHKPTS_DIR + '/' + chkpt + '/' + max(chkptlist))})
                else:
                        u.logerr('INVALID CHKPT DIR ' + chkpt)

        return runnablemap

def update_app_stats_map(appid, statfile):
	fp = open(statfile, 'r')
	stats = fp.readlines()
	app_stats_map.update({appid : {}})
	app_stats_map[appid][stats[-1].split(':')[0].strip()] = float(stats[-1].split(':')[1].strip())
	for stat in stats[0:-2]:
		if stat.split(':')[0].strip() in ['CPU_CYCLES', 'INSTRUCTIONS', 'CACHE_REFERENCES', 'CACHE_MISSES', 'BRANCH_INSTRUCTIONS']:
			app_stats_map[appid][stat.split(':')[0].strip()] = float(stat.split(':')[1].strip())/app_stats_map[appid]['ELAPSED_TIME']
		else:
			app_stats_map[appid][stat.split(':')[0].strip()] = stat.split(':')[1].strip()
	fp.close()
	os.remove(statfile)

def generate_stats_and_enqueue():
	global app_stats_map, MICRO_TIME
	runnable = get_runnable_instance_map()
	app_thread_pid = {}

	for app in runnable:
		tree = ET.parse(c.PARALLEL_DMTCP_APP_INSTANCE_DIR + '/' + app + '.xml')
		root = tree.getroot()
		app_thread_pid.update({app: [int(root.findall('THREADS')[0].text), None, str(app), None]})
	cpu = m.cpu_count()
	while len(app_thread_pid) > 0:
		next_runnable_app_list = []
		local_copy = copy.deepcopy(app_thread_pid)

		while len(local_copy) > 0:
			maxthreadapp = None
			maxthread = -1
			for app in local_copy:
				if local_copy[app][0] > maxthread:
					maxthreadapp = app
					maxthread = local_copy[app][0]

			if(cpu - local_copy[maxthreadapp][0]) >= 0:
				cpu -= local_copy[maxthreadapp][0]
				next_runnable_app_list.append(maxthreadapp)

			local_copy.pop(maxthreadapp)

		print "CPU: " + str(cpu)

		for key in next_runnable_app_list:

			if app_thread_pid[key][1] == None:

				u.loginfo('Executing ' + runnable[key])
				cwd = os.getcwd()
                		chkptnum = 0

				if len(u.listonlydir(c.PARALLEL_DMTCP_CHKPTS_DIR + '/' + str(key))) > 0:
        	               		chkptnum = int(max(u.listonlydir(c.PARALLEL_DMTCP_CHKPTS_DIR + '/' + str(key)))) + 1
	        	        else:
        	        	        chkptnum = 1
				chkptnum = 1
		
        		        os.chdir(c.PARALLEL_DMTCP_CHKPTS_DIR + '/' + str(key) + '/' + str(chkptnum))
				port = u.getopenport()
				u.loginfo('Restart1: ' + str(key))
				a = du.restart(runnable[key], '--new-coordinator', '--port ' + str(port), '--daemon', '-i ' + str(MICRO_TIME) , {'STATFILE': c.PARALLEL_DMTCP_QUEUED_DIR + '/' + key + '.stat', 'STATGEN' : ''})
				os.chdir(cwd)

				app_thread_pid[key][1] = a

		flag = True
		while flag:
			for app in app_thread_pid.items():
				if (app[1][1] != None) and (app[1][1].poll() == 0):
					cpu = cpu + app[1][0]
					app_thread_pid.pop(app[0])
					flag = False
					u.loginfo('Stop1: ' + str(key))
					stats_history_map.update({app[0]:{}})
					stats_history_map[app[0]].update({'INSTRUCTIONS':[]})
					stats_history_map[app[0]].update({'CPU_CYCLES':[]})
					stats_history_map[app[0]].update({'CACHE_MISSES':[]})
					stats_history_map[app[0]].update({'ELAPSED_TIME':[]})
					update_app_stats_map(app[1][2], c.PARALLEL_DMTCP_QUEUED_DIR + '/' + app[1][2] + '.stat')
					app_stats_map[app[1][2]]['TYPE'] = app[1][3]
					app_stats_map[app[1][2]]['pickup_count'] = 0
					stats_history_map[app[1][2]]['INSTRUCTIONS'].append(app_stats_map[app[1][2]]['INSTRUCTIONS'])
					stats_history_map[app[1][2]]['CPU_CYCLES'].append(app_stats_map[app[1][2]]['CPU_CYCLES'])
					stats_history_map[app[1][2]]['CACHE_MISSES'].append(app_stats_map[app[1][2]]['CACHE_MISSES'])
					stats_history_map[app[1][2]]['ELAPSED_TIME'].append(app_stats_map[app[1][2]]['ELAPSED_TIME'])
			if flag:
				time.sleep(1)

def get_next_runnable_map(retval):

	global app_stats_map, total_passes
	runningapplist = None

	for app in os.listdir(c.PARALLEL_DMTCP_RUNNING_DIR):
		update_app_stats_map(app.split('.')[0], c.PARALLEL_DMTCP_RUNNING_DIR + '/' + app)


	if ((len(sys.argv) == 1) or (sys.argv[1] == None) or (sys.argv[1] == '') or (sys.argv[1] == '-r') or (sys.argv[1] == '--random')):
		
		return random.choice(r.RULES.keys())(running_history_map, stats_history_map, app_stats_map, retval, runningapplist, total_passes)
	else:
		return r.RULES[sys.argv[1]](running_history_map, stats_history_map, app_stats_map, retval, runningapplist, total_passes)


def clean_completed(timer):
	global running_pid_port
	freed_threads = 0
	for app in running_pid_port:
		
		if (((timer != TIME) and (app[1].poll() == 0)) or ((timer == TIME) and (not os.path.exists(c.PARALLEL_DMTCP_RUNNING_DIR + '/' + app[0] + '.stat')))):
			os.system('touch ' + c.PARALLEL_DMTCP_COMPLETED_DIR + '/' + app[0] + '.' + u.gettimestamp().replace(' ', '_'))
			running_pid_port.remove(app)
			app_stats_map.pop(app[0])
			tree = ET.parse(c.PARALLEL_DMTCP_APP_INSTANCE_DIR + '/' + app[0] + '.xml')
			root = tree.getroot()
			freed_threads += int(root.findall('THREADS')[0].text)
			print "App Completed: " + str(app[0])

	return freed_threads

def stop_running(next_runnable):
	global running_pid_port

	for app in running_pid_port: 
		app[1].wait()
		stats_history_map[app[0]]['INSTRUCTIONS'].append(app_stats_map[app[0]]['INSTRUCTIONS'])
		stats_history_map[app[0]]['CPU_CYCLES'].append(app_stats_map[app[0]]['CPU_CYCLES'])
		stats_history_map[app[0]]['CACHE_MISSES'].append(app_stats_map[app[0]]['CACHE_MISSES'])
		stats_history_map[app[0]]['ELAPSED_TIME'].append(app_stats_map[app[0]]['ELAPSED_TIME'])

def start_next(next_runnable):
	global timer
	to_restart = next_runnable
	runnable = get_runnable_instance_map()
	
	for app in to_restart:
		cwd = os.getcwd()
		chkptnum = 0
		if len(u.listonlydir(c.PARALLEL_DMTCP_CHKPTS_DIR + '/' + str(app))) > 0:
                        chkptnum = int(max(u.listonlydir(c.PARALLEL_DMTCP_CHKPTS_DIR + '/' + str(app)))) + 1
                else:
                        chkptnum = 1
                chkptnum = 1
		setup_for_restart(c.PARALLEL_DMTCP_CHKPTS_DIR + '/' + str(app) + '/' + str(chkptnum))
		port = u.getopenport()
		cmd = 'STATFILE=' + c.PARALLEL_DMTCP_RUNNING_DIR + '/' + app + '.stat' + ' ' + 'STATGEN= ' + c.DMTCP_RESTART + ' --new-coordinator -i ' + str(timer) + ' --port ' + str(port) + ' ' + runnable[app]
		logfile = open(c.LOGDIR + '/' + c.LOGGER, 'a+')
		a = s.Popen(cmd, shell=True, stdout=logfile, stderr=logfile)
		running_pid_port.append([app, a, port])
		os.chdir(cwd)

def main():
	import time
	global running_pid_port, app_stats_map, total_passes, app_stats_map, running_history, TIME

	if os.path.isdir(c.PARALLEL_DMTCP_STATS_DIR):
                os.rename(c.PARALLEL_DMTCP_STATS_DIR, c.PARALLEL_DMTCP_STATS_DIR + '.' + u.gettimestamp().replace(' ', '_'))

	os.mkdir(c.PARALLEL_DMTCP_STATS_DIR)
	os.mkdir(c.PARALLEL_DMTCP_COMPLETED_DIR)
	os.mkdir(c.PARALLEL_DMTCP_RUNNING_DIR)
	os.mkdir(c.PARALLEL_DMTCP_QUEUED_DIR)
	os.mkdir(c.PARALLEL_DMTCP_NOIDEA_DIR)

	generate_stats_and_enqueue()

	if(sys.argv[1] == '-b'):
		sys.exit(0)

	print 'Stats Generated and Tasks Enqueued!!!'
	timer = 0

	total_passes = 0
	micro_passes = 0
	while(len(app_stats_map) > 0):
		micro_passes += 1
		if timer == 0:
			print 'time to stop'
			stop_running([])
			timer = TIME

		completed = clean_completed(timer)

		if timer == TIME:
			del running_pid_port[:]
			running_pid_port[:] = []
			completed = None

		if timer != (MICRO_TIME*3):
			print 'Completed: ' + str(completed)
			if (completed == None) or ((completed != 0) and (completed != None)) :
				next_runnable = get_next_runnable_map(completed)
				total_passes = total_passes + 1
				if completed == None:
					u.loginfo('Next Runnable List: ' + str(next_runnable))
					running_history_map[total_passes] = next_runnable
				else:
					u.loginfo('Appending new job to current running: ' + str(next_runnable))
					running_history_map[total_passes] = []

					for app in next_runnable:
						running_history_map[total_passes].append(app)

					for app in running_history_map[total_passes - 1]:
						if app in app_stats_map:
							running_history_map[total_passes].append(app)

				start_next(next_runnable)

		print running_history_map
		print timer
		time.sleep(MICRO_TIME)
		timer -= MICRO_TIME

	u.loginfo('Micro Count: ' + str(micro_passes))

if __name__ == "__main__":
	c.LOGGER = 'parallel_dmtcp_a.log'
	u.loginfo('Begin Time:  ' + u.gettimestamp())
	main()
	u.loginfo('End Time:  ' + u.gettimestamp())
